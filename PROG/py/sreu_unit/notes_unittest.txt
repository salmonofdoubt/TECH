
Automated testing in Python
---------------------------





UNIT TESTING
============
no calls to external ressources
test every method in the class

blackbox: no knowledge of what's in the box
whitebox: knowledge of what's in the box, allows better decisions

coverage: what has been exercised, which path taken

pure functions, the purer the better the test:

def X(w, f)
	f = open(file)
	for line in f:
		if w in line:
			count += 1
	return count

above executes everything in that fct: pure. 
if it stores something in external var, it's not pure:

def Z(self):
	total = sum(self.items)
	if self.customer == John
		total = X()			#external call
	self.total = total


class DTest(unittest.TestCase):
	def testStroreRetrieve(self):
	d = dict()
	d['x']
	d['y']
	
	self.assertEqual('y', d['x'])
	
	def


import unittest
or Google: 
home made

stub 			-- (replace a e.g timestamp)
mock out 	-- (fake fct with different parameters / returns)



INTRO
======
extra fct to test ur program
in add to code review, unit tests are necessary

need to be deterministic, not flaky
- common case
- failure case
- edge case
- timely execution
- one property, from small to big
		- unittest (single methods)
		- integration test	(modules interaction)
		- end2end, or functional tests (bot click all the links)
		- continous integration (b4 new CL: tests to be run again)
			TAP (after new CL, detects dependencies also)
		
		


def fib(n)
a, b = 0,1
for i in range(n)
a, b  = b a+b
return a



