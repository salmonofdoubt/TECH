print("Hello")
library(readr)
Data <- read_csv("~/work/ml/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data.csv")
View(Data)
system("python \"Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/data_preprocessing_template.py\"")
dataset = read.csv('Data.csv')
system("python \"Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/missing_data.py\"")
View(Data)
setwd("~/work/ml/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 9 - Random Forest Regression")
library(randomForest)
library(rforest)
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("randomForest")
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c("mgcv", "survival"))
# Fitting Regression to the dataset
#install.packages('randomForest')
library(randomForest)
# to have more than one split add the control feature
regressor = randomForest(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
# Random Forest Regression Template
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training and Test set >>> Lets not do that here, 10 records only
#install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling >>> no need
# training_set[, 2:3] = scale(training_set[, 2:3])
# test_set[, 2:3] = scale(test_set[, 2:3])
# Fitting Regression to the dataset
#install.packages('randomForest')
library(randomForest)
# to have more than one split add the control feature
# Random Forest Regression Template
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training and Test set >>> Lets not do that here, 10 records only
#install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling >>> no need
# training_set[, 2:3] = scale(training_set[, 2:3])
# test_set[, 2:3] = scale(test_set[, 2:3])
# Fitting Regression to the dataset
#install.packages('randomForest')
library(randomForest)
# to have more than one split add the control feature
regressor = randomForest(x = dataset[1],     #dataframe
y = dataset$Salary, #vector
ntree = 10)
# Single Predicting new result
y_pred = predict(regressor, data.frame(Level = 6.5))
summary(y_pred)
# Visualize RANDOM FOREST REGRESSION Model needs HIGH RES so to have many
# splits into leaves, which can be seen clearly
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = "blue") +
ggtitle('Truth or Bluff (RANDOM FOREST REGRESSION MODEL)') +
xlab('Level') +
ylab('Salary')
# Random Forest Regression Template
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training and Test set >>> Lets not do that here, 10 records only
#install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling >>> no need
# training_set[, 2:3] = scale(training_set[, 2:3])
# test_set[, 2:3] = scale(test_set[, 2:3])
# Fitting Regression to the dataset
#install.packages('randomForest')
library(randomForest)
# to have more than one split add the control feature
regressor = randomForest(x = dataset[1],     #dataframe
y = dataset$Salary, #vector
ntree = 1000)
# Single Predicting new result
y_pred = predict(regressor, data.frame(Level = 6.5))
summary(y_pred)
# Visualize RANDOM FOREST REGRESSION Model needs HIGH RES so to have many
# splits into leaves, which can be seen clearly
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = "blue") +
ggtitle('Truth or Bluff (RANDOM FOREST REGRESSION MODEL)') +
xlab('Level') +
ylab('Salary')
# Random Forest Regression Template
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training and Test set >>> Lets not do that here, 10 records only
#install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling >>> no need
# training_set[, 2:3] = scale(training_set[, 2:3])
# test_set[, 2:3] = scale(test_set[, 2:3])
# Fitting Regression to the dataset
#install.packages('randomForest')
library(randomForest)
set.seed(1234)
# to have more than one split add the control feature
regressor = randomForest(x = dataset[1],     #dataframe
y = dataset$Salary, #vector
ntree = 1000)
# Single Predicting new result
y_pred = predict(regressor, data.frame(Level = 6.5))
summary(y_pred)
# Visualize RANDOM FOREST REGRESSION Model needs HIGH RES so to have many
# splits into leaves, which can be seen clearly
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = "blue") +
ggtitle('Truth or Bluff (RANDOM FOREST REGRESSION MODEL)') +
xlab('Level') +
ylab('Salary')
# Random Forest Regression Template
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training and Test set >>> Lets not do that here, 10 records only
#install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling >>> no need
# training_set[, 2:3] = scale(training_set[, 2:3])
# test_set[, 2:3] = scale(test_set[, 2:3])
# Fitting Regression to the dataset
#install.packages('randomForest')
library(randomForest)
set.seed(1234)
# to have more than one split add the control feature
regressor = randomForest(x = dataset[1],     #dataframe
y = dataset$Salary, #vector
ntree = 100)
# Single Predicting new result
y_pred = predict(regressor, data.frame(Level = 6.5))
summary(y_pred)
# Visualize RANDOM FOREST REGRESSION Model needs HIGH RES so to have many
# splits into leaves, which can be seen clearly
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = "blue") +
ggtitle('Truth or Bluff (RANDOM FOREST REGRESSION MODEL)') +
xlab('Level') +
ylab('Salary')
# Random Forest Regression Template
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training and Test set >>> Lets not do that here, 10 records only
#install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling >>> no need
# training_set[, 2:3] = scale(training_set[, 2:3])
# test_set[, 2:3] = scale(test_set[, 2:3])
# Fitting Regression to the dataset
#install.packages('randomForest')
library(randomForest)
set.seed(1234)
# to have more than one split add the control feature
regressor = randomForest(x = dataset[1],     #dataframe
y = dataset$Salary, #vector
ntree = 10000)
# Single Predicting new result
y_pred = predict(regressor, data.frame(Level = 6.5))
summary(y_pred)
# Visualize RANDOM FOREST REGRESSION Model needs HIGH RES so to have many
# splits into leaves, which can be seen clearly
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = "blue") +
ggtitle('Truth or Bluff (RANDOM FOREST REGRESSION MODEL)') +
xlab('Level') +
ylab('Salary')
# Random Forest Regression Template
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training and Test set >>> Lets not do that here, 10 records only
#install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling >>> no need
# training_set[, 2:3] = scale(training_set[, 2:3])
# test_set[, 2:3] = scale(test_set[, 2:3])
# Fitting Regression to the dataset
#install.packages('randomForest')
library(randomForest)
set.seed(1234)
# to have more than one split add the control feature
regressor = randomForest(x = dataset[1],     #dataframe
y = dataset$Salary, #vector
ntree = 500)
# Single Predicting new result
y_pred = predict(regressor, data.frame(Level = 6.5))
summary(y_pred)
# Visualize RANDOM FOREST REGRESSION Model needs HIGH RES so to have many
# splits into leaves, which can be seen clearly
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = "blue") +
ggtitle('Truth or Bluff (RANDOM FOREST REGRESSION MODEL)') +
xlab('Level') +
ylab('Salary')
