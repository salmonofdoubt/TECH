dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training and Test set >>> Lets not do that here, 10 records only
# install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling >>> no need
# training_set[, 2:3] = scale(training_set[, 2:3])
# test_set[, 2:3] = scale(test_set[, 2:3])
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
install.packages('ggplot2')
library(ggplot2)
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
# Visualize Linear Regression results
install.packages('ggplot2')
library(ggplot2)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(lin_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (LINEAR REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Visualize Polynomial Regression results
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
# Visualize Linear Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(lin_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (LINEAR REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Visualize Polynomial Regression results
library(ggplot2)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(lin_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (LINEAR REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
# Fitting Polynomial Regression to the dataset
dataset$Level = dataset$Level
#dataset$Level3 = dataset$Level^3
#dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
# Visualize Linear Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(lin_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (LINEAR REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Visualize Polynomial Regression results
# Fitting Polynomial Regression to the dataset
dataset$Level3 = dataset$Level^2
dataset$Level4 = dataset$Level^3
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
# Visualize Linear Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(lin_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (LINEAR REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Polynominal Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training and Test set >>> Lets not do that here, 10 records only
# install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling >>> no need
# training_set[, 2:3] = scale(training_set[, 2:3])
# test_set[, 2:3] = scale(test_set[, 2:3])
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
# Fitting Polynomial Regression to the dataset
dataset$Level3 = dataset$Level^2
dataset$Level4 = dataset$Level^3
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
# Visualize Linear Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(lin_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (LINEAR REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Visualize Polynomial Regression results
# Visualize Polynomial Regression results
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(poly_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (POLYNOMIAL REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
# Visualize Linear Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(lin_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (LINEAR REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Visualize Polynomial Regression results
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(poly_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (POLYNOMIAL REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
# Visualize Linear Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(lin_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (LINEAR REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Visualize Polynomial Regression results
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(poly_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (POLYNOMIAL REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Polynominal Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training and Test set >>> Lets not do that here, 10 records only
# install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling >>> no need
# training_set[, 2:3] = scale(training_set[, 2:3])
# test_set[, 2:3] = scale(test_set[, 2:3])
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
# Fitting Polynomial Regression to the dataset
#dataset$Level2 = dataset$Level^2
#dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
# Visualize Linear Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(lin_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (LINEAR REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Visualize Polynomial Regression results
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(poly_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (POLYNOMIAL REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Polynominal Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training and Test set >>> Lets not do that here, 10 records only
# install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling >>> no need
# training_set[, 2:3] = scale(training_set[, 2:3])
# test_set[, 2:3] = scale(test_set[, 2:3])
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
dataset$Level5 = dataset$Level^5
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
# Visualize Linear Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(lin_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (LINEAR REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Visualize Polynomial Regression results
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(poly_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (POLYNOMIAL REGRESSION)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(lin_reg, 6.5)
summary(y_pred)
y_pred = predict(lin_reg, data.frame(Level = 6.5)
summary(y_pred)
y_pred = predict(lin_reg, data.frame(Level = 6.5))
summary(y_pred)
# Single Predicting a new result with Polynomial Regression
y_pred = predict(poly_reg, data.frame(Level = 6.5))
summary(y_pred)
# Single Predicting a new result with Linear Regression
y_pred = predict(lin_reg, data.frame(Level = 6.5))
summary(y_pred)
# Single Predicting a new result with Polynomial Regression
y_pred = predict(poly_reg, data.frame(Level = 6.5))
summary(y_pred)
# Single Predicting a new result with Polynomial Regression
y_pred_poly = predict(poly_reg, data.frame(Level = 6.5))
summary(y_pred_poly)
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
dataset$Level5 = dataset$Level^5
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
# Single Predicting a new result with Linear Regression
y_pred = predict(lin_reg, data.frame(Level = 6.5))
summary(y_pred)
# Single Predicting a new result with Polynomial Regression
y_pred_poly = predict(poly_reg, data.frame(Level = 6.5))
summary(y_pred_poly)
# Visualize Linear Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(lin_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (LINEAR REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Visualize Polynomial Regression results
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(poly_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (POLYNOMIAL REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Single Predicting new result with Polynomial Regression
y_pred = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4,
Level5 = 6.5^5))
summary(y_pred)
# Single Predicting new result with Linear Regression
y_pred = predict(lin_reg, data.frame(Level = 6.5))
summary(y_pred)
# Single Predicting new result with Polynomial Regression
y_pred = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4,
Level5 = 6.5^5))
summary(y_pred)
# Single Predicting new result with Polynomial Regression
y_pred_poly = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4,
Level5 = 6.5^5))
summary(y_pred_poly)
# Single Predicting new result with Linear Regression
y_pred = predict(lin_reg, data.frame(Level = 6.5))
summary(y_pred)
# Single Predicting new result with Polynomial Regression
y_pred_poly = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4,
Level5 = 6.5^5))
summary(y_pred_poly)
# Polynominal Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training and Test set >>> Lets not do that here, 10 records only
# install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling >>> no need
# training_set[, 2:3] = scale(training_set[, 2:3])
# test_set[, 2:3] = scale(test_set[, 2:3])
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
dataset$Level5 = dataset$Level^5
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
# Single Predicting new result with Linear Regression
y_pred = predict(lin_reg, data.frame(Level = 6.5))
summary(y_pred)
# Single Predicting new result with Polynomial Regression
y_pred_poly = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4,
Level5 = 6.5^5))
summary(y_pred_poly)
# Visualize Linear Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(lin_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (LINEAR REGRESSION)') +
xlab('Level') +
ylab('Salary')
# Visualize Polynomial Regression results
ggplot() +
# actual values
geom_point(aes(x=dataset$Level , y=dataset$Salary),
colour = "red") +
# prediction
geom_line(aes(x=dataset$Level , y=predict(poly_reg, newdata = dataset)),
colour = "blue") +
ggtitle('Truth or Bluff (POLYNOMIAL REGRESSION)') +
xlab('Level') +
ylab('Salary')
